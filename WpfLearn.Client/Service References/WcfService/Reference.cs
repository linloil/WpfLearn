//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18052
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Threading;
using System.Threading.Tasks;


namespace WpfLearn.Client.WcfService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WcfService.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetWorkstationDtoList", ReplyAction="http://tempuri.org/IService/GetWorkstationDtoListResponse")]
        WpfLearn.Server.NetworkNodes.WorkstationDto[] GetWorkstationDtoList(int page, int pageSize);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetWorkstationDtoList", ReplyAction="http://tempuri.org/IService/GetWorkstationDtoListResponse")]
        System.Threading.Tasks.Task<WpfLearn.Server.NetworkNodes.WorkstationDto[]> GetWorkstationDtoListAsync(int page, int pageSize);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetWorkstation", ReplyAction="http://tempuri.org/IService/GetWorkstationResponse")]
        WpfLearn.Server.NetworkNodes.Workstation GetWorkstation(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetWorkstation", ReplyAction="http://tempuri.org/IService/GetWorkstationResponse")]
        System.Threading.Tasks.Task<WpfLearn.Server.NetworkNodes.Workstation> GetWorkstationAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteWorkstation", ReplyAction="http://tempuri.org/IService/DeleteWorkstationResponse")]
        void DeleteWorkstation(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteWorkstation", ReplyAction="http://tempuri.org/IService/DeleteWorkstationResponse")]
        System.Threading.Tasks.Task DeleteWorkstationAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SaveWorkstation", ReplyAction="http://tempuri.org/IService/SaveWorkstationResponse")]
        void SaveWorkstation(WpfLearn.Server.NetworkNodes.Workstation workstation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SaveWorkstation", ReplyAction="http://tempuri.org/IService/SaveWorkstationResponse")]
        System.Threading.Tasks.Task SaveWorkstationAsync(WpfLearn.Server.NetworkNodes.Workstation workstation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetCoordinatorList", ReplyAction="http://tempuri.org/IService/GetCoordinatorListResponse")]
        WpfLearn.Server.NetworkNodes.Coordinator[] GetCoordinatorList(int page, int pageSize);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetCoordinatorList", ReplyAction="http://tempuri.org/IService/GetCoordinatorListResponse")]
        System.Threading.Tasks.Task<WpfLearn.Server.NetworkNodes.Coordinator[]> GetCoordinatorListAsync(int page, int pageSize);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : WpfLearn.Client.WcfService.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<WpfLearn.Client.WcfService.IService>, WpfLearn.Client.WcfService.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public WpfLearn.Server.NetworkNodes.WorkstationDto[] GetWorkstationDtoList(int page, int pageSize) {
            return base.Channel.GetWorkstationDtoList(page, pageSize);
        }
        
        public System.Threading.Tasks.Task<WpfLearn.Server.NetworkNodes.WorkstationDto[]> GetWorkstationDtoListAsync(int page, int pageSize) {
            return base.Channel.GetWorkstationDtoListAsync(page, pageSize);
        }
        
        public WpfLearn.Server.NetworkNodes.Workstation GetWorkstation(int id) {
            return base.Channel.GetWorkstation(id);
        }
        
        public System.Threading.Tasks.Task<WpfLearn.Server.NetworkNodes.Workstation> GetWorkstationAsync(int id) {
            return base.Channel.GetWorkstationAsync(id);
        }
        
        public void DeleteWorkstation(int id) {
            base.Channel.DeleteWorkstation(id);
        }
        
        public System.Threading.Tasks.Task DeleteWorkstationAsync(int id)
        {
            return base.Channel.DeleteWorkstationAsync(id);
        }
        
        public void SaveWorkstation(WpfLearn.Server.NetworkNodes.Workstation workstation) {
            base.Channel.SaveWorkstation(workstation);
        }
        
        public System.Threading.Tasks.Task SaveWorkstationAsync(WpfLearn.Server.NetworkNodes.Workstation workstation) {
            return base.Channel.SaveWorkstationAsync(workstation);
        }
        
        public WpfLearn.Server.NetworkNodes.Coordinator[] GetCoordinatorList(int page, int pageSize) {
            return base.Channel.GetCoordinatorList(page, pageSize);
        }
        
        public System.Threading.Tasks.Task<WpfLearn.Server.NetworkNodes.Coordinator[]> GetCoordinatorListAsync(int page, int pageSize) {
            return base.Channel.GetCoordinatorListAsync(page, pageSize);
        }
    }
}
